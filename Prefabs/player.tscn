[gd_scene load_steps=8 format=1]

[ext_resource path="res://Assets/players/char_normal.png" type="Texture" id=1]
[ext_resource path="res://Assets/left_pallete.png" type="Texture" id=2]

[sub_resource type="ConvexPolygonShape2D" id=1]

custom_solver_bias = 0.0
points = Vector2Array( 27, 27, -27, 27, -27, 0, -18, -18, -5, -27, 5, -27, 18, -18, 27, 0 )

[sub_resource type="GDScript" id=2]

script/source = "extends RigidBody2D

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"
const MAX_SPEED = 400
const ACCELRATION = 1600
const MAX_HITPOINTS = 10

var hitpoints = MAX_HITPOINTS
var current_type = 0

var jumps = 2
var jumping = 0
const BULLET = preload(\"res://Prefabs/bullet.tscn\")

var stopped = false
var since_stopped = 1
var x_to_be_modified = 0

var barrel = null
var gun = null
var sprite = null

const CHAR_FALLING = preload(\"res://Assets/players/char_falling.png\")
const CHAR_NORMAL = preload(\"res://Assets/players/char_normal.png\")
const CHAR_WALKING_RIGHT = preload(\"res://Assets/players/char_walking_right.png\")
const CHAR_WALKING_LEFT = preload(\"res://Assets/players/char_walking_left.png\")


var left_input
var right_input
var jump_input
var shoot_input

var player_name = \"nameless blob\"

func _ready():
	set_fixed_process(true)
	set_process_input(true)
	gun = get_node(\"gun\")
	barrel = get_node(\"gun/barrel\")
	sprite = get_node(\"Sprite\")
	# Called every time the node is added to the scene.
	# Initialization here
	#set_use_custom_integrator(true)

func get_player_name():
	return player_name

func set_player_name(name_to_set):
	player_name = name_to_set
	
func get_current_type():
	return current_type
	
func set_current_type(type_to_set):
	current_type = type_to_set
	
func set_controlls(controlls):
	left_input =  controlls + \"_left\"
	right_input = controlls + \"_right\"
	jump_input = controlls + \"_jump\"
	shoot_input = controlls + \"_shoot\"

func reset_jumps():
	jumps = 2

func set_jumping(x):
	jumping += x
	
func move_horizontal(delta, scale):
	var v = get_linear_velocity()
	if v.x == 0 or scale == 0 or abs(v.x) / v.x == abs(scale) / scale:
		x_to_be_modified += ACCELRATION * delta * scale
	else:
		x_to_be_modified = v.x * -1
		stopped = true
		since_stopped = 0

func _integrate_forces(state):
	var v = state.get_linear_velocity()
	var next_x = v.x
	var initial_x = next_x
	next_x += x_to_be_modified
	x_to_be_modified = 0
	
	if next_x > MAX_SPEED:
		next_x = MAX_SPEED
	elif next_x < -MAX_SPEED:
		next_x = -MAX_SPEED
	
	state.set_linear_velocity(Vector2(next_x, v.y))
	
func _input(event):
	if jumps and event.is_action_pressed(jump_input):
		jumps -= 1
		set_linear_velocity(Vector2(0, -700))
	if event.is_action_pressed(shoot_input):
		#apply_impulse(Vector2(0,0),Vector2(-200 * cos(gun.get_rot()), -200 * -sin(gun.get_rot())))
		var bullet = BULLET.instance()
		bullet.set_type(get_current_type())
		bullet.set_rot(gun.get_rot())
		var pos = get_pos() + Vector2(60 * cos(gun.get_rot()), 60 * -sin(gun.get_rot()))
		bullet.set_pos(pos)
		print(gun.get_rot())
		bullet.set_speed(Vector2(500 * cos(gun.get_rot()), 500 * -sin(gun.get_rot())))
		bullet.add_immune(self)
		get_parent().add_child(bullet)
		
func die():
		queue_free()
		
func _take_dmg(amount):
	if amount > hitpoints:
		print(\"ded\")
		die()
	else:
		hitpoints -= amount

func _notification(what):
	if 1337 == what:
		if 0 == current_type:
			_take_dmg(2)
		elif 1 == current_type:
			_take_dmg(1)
		elif 2 == current_type:
			_take_dmg(4)
	if 1338 == what:
		if 0 == current_type:
			_take_dmg(4)
		elif 1 == current_type:
			_take_dmg(2)
		elif 2 == current_type:
			_take_dmg(1)
	if 1339 == what:
		if 0 == current_type:
			_take_dmg(1)
		elif 1 == current_type:
			_take_dmg(4)
		elif 2 == current_type:
			_take_dmg(2)

func _fixed_process(delta):
	if not stopped and Input.is_action_pressed(right_input):
		move_horizontal(delta, 1)
	if not stopped and Input.is_action_pressed(left_input):
		move_horizontal(delta, -1)
	if since_stopped < 0.03:
		since_stopped += delta
	else:
		stopped = false
	if jumping==0:
		sprite.set_texture(CHAR_FALLING)
	else:
		if x_to_be_modified<-10:
			sprite.set_texture(CHAR_WALKING_LEFT)
		elif x_to_be_modified>10:
			sprite.set_texture(CHAR_WALKING_RIGHT)
		else:
			sprite.set_texture(CHAR_NORMAL)
"

[sub_resource type="RectangleShape2D" id=3]

custom_solver_bias = 0.0
extents = Vector2( 10, 10 )

[sub_resource type="GDScript" id=4]

script/source = "extends Area2D

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	connect(\"body_enter\", self, \"on_body_enter\")
	connect(\"body_exit\", self, \"on_body_exit\")
	
func on_body_enter(body):
	get_parent().reset_jumps()
	get_parent().set_jumping(1)

func on_body_exit(body):
	get_parent().set_jumping(-1)"

[sub_resource type="GDScript" id=5]

script/source = "extends Position2D

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	set_process(true)
	
func _process(delta):
	set_rot(to_angle(get_viewport().get_mouse_pos() - get_parent().get_pos() ))
	
func to_angle(vector):
	return (atan2(vector.x, vector.y) - PI/2)"

[node name="Player" type="RigidBody2D"]

input/pickable = false
shapes/0/shape = SubResource( 1 )
shapes/0/transform = Matrix32( 1, 0, 0, 1, 0, 0 )
shapes/0/trigger = false
collision/layers = 1
collision/mask = 1
mode = 2
mass = 1.0
friction = 0.2
bounce = 0.2
gravity_scale = 15.0
custom_integrator = false
continuous_cd = 0
contacts_reported = 0
contact_monitor = false
sleeping = false
can_sleep = false
velocity/linear = Vector2( 0, 0 )
velocity/angular = 0.0
damp_override/linear = -1.0
damp_override/angular = -1.0
script/script = SubResource( 2 )

[node name="Sprite" type="Sprite" parent="."]

transform/scale = Vector2( 0.12, 0.12 )
texture = ExtResource( 1 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]

build_mode = 0
polygon = Vector2Array( 27, 27, -27, 27, -27, 0, -18, -18, -5, -27, 5, -27, 18, -18, 27, 0 )
shape_range = Vector2( 0, 0 )
trigger = false

[node name="feet" type="Area2D" parent="."]

editor/display_folded = true
transform/pos = Vector2( 0, 35 )
transform/scale = Vector2( 0.9, 0.1 )
input/pickable = true
shapes/0/shape = SubResource( 3 )
shapes/0/transform = Matrix32( 3, 0, 0, 3, 0, 0 )
shapes/0/trigger = true
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0
script/script = SubResource( 4 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="feet"]

transform/scale = Vector2( 3, 3 )
shape = SubResource( 3 )
trigger = true
_update_shape_index = 0

[node name="gun" type="Position2D" parent="."]

script/script = SubResource( 5 )

[node name="barrel" type="Position2D" parent="gun"]

transform/pos = Vector2( 60, 0 )

[node name="Sprite" type="Sprite" parent="gun/barrel"]

texture = ExtResource( 2 )


